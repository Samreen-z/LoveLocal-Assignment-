//  Given an integer numRows, return the first numRows of Pascal's triangle.
//  Example 1:
//  Input: numRows = 5
// Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();

        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j <= i; j++) {
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    row.add(result.get(i - 1).get(j - 1) + result.get(i - 1).get(j));
                }
            }
            result.add(row);
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Input: numRows =  ");
        int numRows = scanner.nextInt();

        List<List<Integer>> result = generate(numRows);

        System.out.println("Output:" + result);

        scanner.close();
    }
}
// the logic in the code:

// The generate function takes an integer numRows as input and returns
// a List of Lists representing Pascal's triangle.

// It uses a nested loop to iterate through each row and column of the triangle.

// For each row, a new ArrayList is created to store the elements of that row.

// For each column in the row, it checks if the column index is either 0 
// or the last index of the row. If so, it adds 1 to the row, as these are the edge elements.

// For other elements in the row, it calculates the value by adding the corresponding 
// elements from the previous row.

// The generated row is then added to the overall result.

// The main function of the code takes user input for the number of rows, calls the 
// generate function, and prints the resulting Pascal's triangle.
