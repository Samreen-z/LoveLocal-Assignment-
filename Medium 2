// Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
 
// Example 1:
// Input: nums = [3,2,3]
// Output: [3]

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt user for input
        System.out.print("Give the array in this form [a,b,c];Input : nums = ");
        String input = scanner.nextLine();

        // Extract the array elements using regex
        List<Integer> nums = extractArrayElements(input);

        // Find elements that appear more than ⌊ n/3 ⌋ times
        List<Integer> result = majorityElements(nums);
        System.out.println("Output: " + result);

        // Close the scanner
        scanner.close();
    }

    public static List<Integer> extractArrayElements(String input) {
        List<Integer> elements = new ArrayList<>();
        Pattern pattern = Pattern.compile("\\d+");
        Matcher matcher = pattern.matcher(input);

        while (matcher.find()) {
            elements.add(Integer.parseInt(matcher.group()));
        }

        return elements;
    }

    public static List<Integer> majorityElements(List<Integer> nums) {
        List<Integer> result = new ArrayList<>();

        // Initialize candidates and their counters
        int candidate1 = 0, count1 = 0;
        int candidate2 = 0, count2 = 0;

        // Voting process
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        // Count occurrences of candidates to verify
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }

        // Check if candidates appear more than ⌊ n/3 ⌋ times
        if (count1 > nums.size() / 3) {
            result.add(candidate1);
        }
        if (count2 > nums.size() / 3) {
            result.add(candidate2);
        }

        return result;
    }
}
//LOGIC & ALGORITHM
// The logic is based on the Boyer-Moore Majority Vote algorithm.
// The algorithm efficiently identifies potential majority elements using voting.
// The program takes user input, extracts array elements, and finds elements that appear more than ⌊ n/3 ⌋ times in the array.
// The result is printed to the console.
// The overall logic involves string parsing, array manipulation, and the implementation of the Boyer-Moore Majority Vote algorithm for finding majority elements in an array.


// 1.Initialization:
// Two candidates (candidate1 and candidate2) and their respective 
// counters (count1 and count2) are initialized.

// 2.Voting Process:
// The method iterates through the list of integers (nums).
// If an integer matches one of the candidates, its counter is incremented.
// If a counter is zero, the current integer becomes a candidate, and its counter is set to 1.
// If both counters are non-zero, both counters are decremented.

// 3.Verification:
// After the voting process, the occurrences of the two candidates are re-counted 
// in the original list to verify if they appear more than ⌊ n/3 ⌋ times.

// 4.Result List:
// If a candidate appears more than ⌊ n/3 ⌋ times, it is added to the result list.

// 5.Return Result:
// The method returns the result list containing elements that appear more than [ n/3 ] times.
